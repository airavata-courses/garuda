version: "3.8"

services:
  mongodb:
    container_name: garuda_mongo
    image: mongo:latest
    restart: unless-stopped
    healthcheck:
      test: test $$(echo "rs.initiate().ok || rs.status().ok" | mongo --quiet) -eq 1
      interval: 10s
      start_period: 30s
    command: "--bind_ip_all --replSet MainRepSet"
    ports:
      - 27017:27017
    volumes:
      - db:/data/db
  db_middleware_writer:
    container_name: garudadbmiddlewarewriter
    image: acharyapranav/garuda:db_middleware-$PROJECT
    depends_on:
      - mongodb
    build: ./db_middleware
    environment:
      - DB_HOSTS=garuda_mongo:27017
      - DB_DATABASE=garuda
      - APP_PORT=3001
      - APP_TYPE=writer
      - DB_REPLICA_SET=MainRepSet
      - DB_REPLICA_SET_PREFERENCE=secondaryPreferred
      - AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
    restart: unless-stopped
    ports:
      - 3001:3001
    stdin_open: true
    tty: true
  db_middleware_reader:
    container_name: garudadbmiddlewarereader
    image: acharyapranav/garuda:db_middleware-$PROJECT
    depends_on:
      - mongodb
    build: ./db_middleware
    environment:
      - DB_HOSTS=garuda_mongo:27017
      - DB_DATABASE=garuda
      - APP_PORT=3002
      - APP_TYPE=reader
      - DB_REPLICA_SET=MainRepSet
      - DB_REPLICA_SET_PREFERENCE=secondaryPreferred
    restart: unless-stopped
    ports:
      - 3002:3002
    stdin_open: true
    tty: true
  api_gateway:
    container_name: garuda_api_gateway
    image: acharyapranav/garuda:api_gateway-$PROJECT
    depends_on:
      - mongodb
      - db_middleware_writer
      - db_middleware_reader
      - rabbitmq
    build: ./apigateway
    environment:
      - DB_MIDDLEWARE_WRITER_HOST=garudadbmiddlewarewriter
      - DB_MIDDLEWARE_WRITER_PORT=3001
      - DB_MIDDLEWARE_READER_HOST=garudadbmiddlewarereader
      - DB_MIDDLEWARE_READER_PORT=3002
      - RABBITMQ_HOST=garuda_rabbitmq
      - RABBITMQ_PORT=5672
      - APP_PORT=5000
    restart: unless-stopped
    ports:
      - 5000:5000
    stdin_open: true
    tty: true
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'garuda_rabbitmq'
    hostname: "garuda_rabbitmq"
    restart: unless-stopped
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - queue:/var/lib/rabbitmq/
      - queue:/var/log/rabbitmq
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:15672" ]
      interval: 30s
      timeout: 10s
      retries: 5
  queue_worker:
    container_name: garuda_queue_worker
    image: acharyapranav/garuda:queue_worker-$PROJECT
    restart: unless-stopped
    depends_on:
      - rabbitmq
      - db_middleware_writer
      - db_middleware_reader
    build: .
    environment:
      - DB_MIDDLEWARE_WRITER_HOST=garudadbmiddlewarewriter
      - DB_MIDDLEWARE_WRITER_PORT=3001
      - RABBITMQ_HOST=garuda_rabbitmq
      - RABBITMQ_PORT=5672
    stdin_open: true
    tty: true
  queue_worker_nasa:
    container_name: garuda_queue_worker_nasa
    image: acharyapranav/garuda:queue_worker_nasa-$PROJECT
    depends_on:
      - mongodb
      - db_middleware_writer
      - db_middleware_reader
      - rabbitmq
    build: 
      context: ./queue_worker_nasa
      args:
        - nasa_username=$NASA_USERNAME
        - nasa_password=$NASA_PASSWORD
    environment:
      - DB_MIDDLEWARE_WRITER_HOST=garudadbmiddlewarewriter
      - DB_MIDDLEWARE_WRITER_PORT=3001
      - RABBITMQ_HOST=garuda_rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_QUEUE_NASA=offload_queue_nasa
    restart: unless-stopped
    stdin_open: true
    tty: true
  web_app:
    container_name: garuda_web_app
    image: acharyapranav/garuda:web_app-$PROJECT
    restart: unless-stopped
    build: 
      context: ./web_app
      args:
        - REACT_APP_API_GATEWAY_HOST=garuda-ui.org
        - REACT_APP_API_GATEWAY_PORT=30000
    depends_on:
      - api_gateway
    ports:
      - 3000:80
    environment:
      - CHOKIDAR_USEPOLLING=true
    stdin_open: true
    tty: true

volumes:
  db:
  queue:
